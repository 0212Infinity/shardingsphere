tables:
  config:
    actualTables: t_config
    
  t_order: 
    actualTables: t_order_${0..1}
    databaseStrategy: 
      standard:
        shardingColumn: user_id
        preciseAlgorithmClassName: io.shardingjdbc.config.yaml.algorithm.SingleAlgorithm
    tableStrategy: 
      inline:
        shardingColumn: order_id
        algorithmInlineExpression: t_order_${id % 2}
    keyGeneratorColumnName: order_id
    keyGeneratorClass: io.shardingjdbc.config.yaml.fixture.IncrementKeyGenerator
  
  t_order_item:
    actualTables: t_order_item_${0..1}
    #绑定表中其余的表的策略与第一张表的策略相同
    databaseStrategy: 
      standard:
        shardingColumn: user_id
        preciseAlgorithmClassName: io.shardingjdbc.config.yaml.algorithm.SingleAlgorithm
    tableStrategy: 
      inline:
        shardingColumn: order_id
        algorithmInlineExpression: t_order_item_${order_id % 2}

bindingTables:
  - t_order,t_order_item
#默认数据库分片策略
defaultDatabaseStrategy:
  none:
defaultTableStrategy:
  complex:
    shardingColumns: id, order_id
    algorithmClassName: io.shardingjdbc.config.yaml.algorithm.MultiAlgorithm

masterSlaveRules:
  db0_ms:
    masterDataSourceName:
      db0_master
    slaveDataSourceNames:
      - db0_slave
  db1_ms:
    masterDataSourceName:
      db1_master
    slaveDataSourceNames:
      - db1_slave
props:
  sql.show: true